apiVersion: v1
kind: ConfigMap
metadata:
  name: auto-scale-scripts-prod
  namespace: devops-agent-management
data:
  auto-scale-dev-pod.sh: |
    #!/bin/bash

    # yum install -y gawk
    ORG_URL="https://dev.azure.com/xxxx"
    PAT_TOKEN=${AZURE_DEVOPS_PAT}
    # Encode PAT for use in the Authorization header, pay atttention that : prefix is required
    PAT_TOKEN_B64=$(printf "%s"":$PAT_TOKEN" | base64 -w0)
    API_VERSION="7.1"

    # Resrouce group and VMSS name
    RG_NAME=${VMSS_RG_NAME}
    VMSS_NAME=${VMSS_NAME}

    # Get devops pool id by pool name
    POOL_NAME=${POOL_NAME}

    POOL_ID=$(curl -s -H "Authorization: Basic $PAT_TOKEN_B64" "${ORG_URL}/_apis/distributedtask/pools?api-version=${API_VERSION}" | jq -r '.value[] | select(.name == "'$POOL_NAME'") | .id')

    if [ -z "$POOL_ID" ]; then
        echo "Pool $POOL_NAME not found, please check the pool name and PAT token"
        exit 1
    fi
    echo "Agent pool $POOL_NAME found, Pool ID: $POOL_ID"

    # Login AzureChina and set RG and VMSS name
    az account clear && az cloud set --name AzureChinaCloud && az login --service-principal --username "${AZURE_CLIENT_ID}" --tenant "${AZURE_TENANT_ID}" --federated-token "$(cat $AZURE_FEDERATED_TOKEN_FILE)"


    # Get VM instance id by agent computer name
    function getInstanceID() {
        local RG_NAME=$1
        local VMSS_NAME=$2
        local TARGET_COMPUTER_NAME=$3

        # Get the map of instance ids to computer names for all instances in the VMSS
        local INSTANCES=$(az vmss list-instances --resource-group $RG_NAME --name $VMSS_NAME --query "[].{name:name, computerName:osProfile.computerName}" -o json)

        for INSTANCE in $(echo $INSTANCES | jq -c '.[]'); do
            local INSTANCE_NAME=$(echo $INSTANCE | jq -r '.name')
            local COMPUTER_NAME=$(echo $INSTANCE | jq -r '.computerName')

            if [ "$COMPUTER_NAME" == "$TARGET_COMPUTER_NAME" ]; then
                local INSTANCE_ID=$(echo $INSTANCE_NAME | awk -F'_' '{print $NF}')
                echo $INSTANCE_ID
                return
            fi
        done

        # If the agent is not found, return empty string
        echo ""
    }


    # Get a list of all agent ids in the pool
    AGENT_IDS=$(curl -s -H "Authorization: Basic $PAT_TOKEN_B64" "${ORG_URL}/_apis/distributedtask/pools/${POOL_ID}/agents?api-version=${API_VERSION}" | jq -r '.value[].id')

    # Loop through the agent ids and get the details for each agent
    for AGENT_ID in $AGENT_IDS; do

        # Get info of each agent, including assignedRequest and capabilities
        AGENT_INFO=$(curl -s -H "Authorization: Basic $PAT_TOKEN_B64" "${ORG_URL}/_apis/distributedtask/pools/${POOL_ID}/agents/${AGENT_ID}?includeAssignedRequest=true&includeCapabilities=true&api-version=${API_VERSION}")

        # filter offline agents, delete them firstly to avoid conflict with newly created instances later
        if [ "$(echo "$AGENT_INFO" | jq -r '.status')" = "offline" ]; then
            # get compuster name of the agent
            COMPUTER_NAME=$(echo "$AGENT_INFO" | jq -r '.systemCapabilities."Agent.ComputerName"')
            echo "Deleting offline agent $AGENT_ID, computer name: $COMPUTER_NAME"
            # delete agent from devops pool
            curl -s -X DELETE -H "Authorization: Basic $PAT_TOKEN_B64" "${ORG_URL}/_apis/distributedtask/pools/${POOL_ID}/agents/${AGENT_ID}?api-version=${API_VERSION}"

            # delete azure vm instance
            VM_INSTANCE_ID=$(getInstanceID "$RG_NAME" "$VMSS_NAME" "$COMPUTER_NAME")

            if [ -n "$VM_INSTANCE_ID" ]; then
                echo "Deleting VM instance in Azure, computer name: $COMPUTER_NAME, instance id: $VM_INSTANCE_ID"
                az vmss delete-instances --resource-group $RG_NAME --name $VMSS_NAME --instance-ids $VM_INSTANCE_ID
            else
                echo "VM instance not found for agent $AGENT_ID (computer name: $COMPUTER_NAME, instance id: $VM_INSTANCE_ID), skipping"
            fi

        # filter the agents whose status is online and has been created more than 5 days
        elif [ "$(echo "$AGENT_INFO" | jq -r '.status')" = "online" ] && [ "$(echo "$AGENT_INFO" | jq -r '.createdOn | sub("\\..*"; "Z") | fromdateiso8601')" -lt "$(date -d "5 days ago" +%s)" ]; then

            if jq -e '.assignedRequest | not' <<< "$AGENT_INFO" > /dev/null; then
                echo "Agent $AGENT_ID is older than 5 days, currently online and idle, can be removed"
                # delete agent from devops pool
                echo "Deleting agent $AGENT_ID from pool $POOL_ID"
                curl -s -X DELETE -H "Authorization: Basic $PAT_TOKEN_B64" "${ORG_URL}/_apis/distributedtask/pools/${POOL_ID}/agents/${AGENT_ID}?api-version=${API_VERSION}"

                # Get its computer name
                COMPUTER_NAME=$(echo "$AGENT_INFO" | jq -r '.systemCapabilities."Agent.ComputerName"')
                # delete azure vm instance
                VM_INSTANCE_ID=$(getInstanceID "$RG_NAME" "$VMSS_NAME" "$COMPUTER_NAME")

                if [ -n "$VM_INSTANCE_ID" ]; then
                    echo "Deleting VM instance in Azure, computer name: $COMPUTER_NAME, instance id: $VM_INSTANCE_ID"
                    az vmss delete-instances --resource-group $RG_NAME --name $VMSS_NAME --instance-ids $VM_INSTANCE_ID
                else
                    echo "VM instance not found for agent $AGENT_ID (computer name: $COMPUTER_NAME, instance id: $VM_INSTANCE_ID)"
                fi

            else
                # the online agent is currently running a job, skip it.
                echo "Agent $AGENT_ID is idle but has been assigned a request, keep it"
            fi

        else
            # the agent younger than 5 days, skip it.
            echo "Agent $AGENT_ID is created less than 5 days, keep it"
        fi
    done

    # Get the number of remaining agents in the pool
    AGENT_COUNTS=$(curl -s -H "Authorization: Basic $PAT_TOKEN_B64" "${ORG_URL}/_apis/distributedtask/pools/${POOL_ID}/agents?api-version=${API_VERSION}" | jq -r '.count')
    echo "There are $AGENT_COUNTS agents remaining in pool $POOL_NAME"

    # If current number of agents is less than expected, scale out the VMSS to the expected number
    # scale one by one to avoid name conflicting in agent pool
    if [ $AGENT_COUNTS -lt ${EXPECTED_COUNT} ]; then
        CURRENT_COUNT=$AGENT_COUNTS
        echo "Scaling out VMSS $VMSS_NAME from $CURRENT_COUNT to ${EXPECTED_COUNT} instances"

        while [ $CURRENT_COUNT -lt ${EXPECTED_COUNT} ]; do
            NEW_COUNT=$((CURRENT_COUNT + 1))
            echo "Scaling to $NEW_COUNT instances"
            az vmss scale --resource-group $RG_NAME --name $VMSS_NAME --new-capacity $NEW_COUNT
            sleep 10
            CURRENT_COUNT=$NEW_COUNT
        done
    fi
